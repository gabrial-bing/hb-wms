
server:
  port: 8082
  servlet:
    context-path: /hb-wms

spring:
  application:
    name: hb-wms
  profiles:
    active: dev # 开发环境
  datasource:
    # 特别注意：java 9以后需要将com.mysql.jdbc.Driver  改为  com.mysql.cj.jdbc.Driver即可
    # 否则报错：Loading class `com.mysql.jdbc.Driver'. This is deprecated.
    name: test
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      driver-class-name: com.mysql.jdbc.Driver
      url: jdbc:mysql://47.105.155.225:3306/hb?useUnicode=true&characterEncoding=utf-8&allowMultiQueries=true&useSSL=false
      username: root
      password: hbadmin
      # 配置初始化大小/最小/最大[仅用于测试，生成环境需要修改]
      initial-size: 5
      min-idle: 5
      max-active: 20
      # 获取连接等待超时时间
      max-wait: 60000
      # 间隔多久进行一次检测，检测需要关闭的空闲连接
      time-between-eviction-runs-millis: 60000
      # 一个连接在池中最小生存的时间
      min-evictable-idle-time-millis: 300000
      # 指定获取连接时连接校验的sql查询语句
      validation-query: SELECT 1
      # 验证连接的有效性
      test-while-idle: true
      # 获取连接时候验证，会影响性能（不建议true）
      test-on-borrow: false
      test-on-return: false
      # 打开PSCache，并指定每个连接上PSCache的大小。分库分表较多推荐设置为false
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      # 监控统计拦截的filters
      filters: stat #,wall,log4j
      connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    joda-date-time-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
  mvc:
    view:
      prefix: /WEB-INF/page/
      suffix: .jsp
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
  jmx:
    default-domain: wms-jmx # TODO: G:注意这个，每个项目的这个属性不能相同


mybatis:
  # 映射文件的路径 ，支持 Ant 风格的通配符， 多个配置可以使用英文逗号隔开
  mapper-locations: classpath:mapper/*.xml
  # 类型别名包画配置，只能指定具体的包，多个配置可以使用英文逗号隔开
  type-aliases-package: com.hb.upms.domain
  #configuration:
    # 用于开发调试时打印SQL语句
    #log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    #call-setters-on-nulls: true # 默认情况下,Mybatis对Map的解析生成, 如果值(value)为null的话,那么key也不会被加入到map中.

pagehelper:
  # 数据库的类型
  helper-dialect: mysql
  # 分页插件会从查询方法的参数值中，自动根据上面 params 配置的字段中取值，查找到合适的值时就会自动分页。
  support-methods-arguments: true
  # 分页会进行count查询 .默认=false
  row-bounds-with-count: true
  #  分页参数合理化，默认false禁用.当该参数设置为true时，pageNum<=0 时会查询第一页， pageNum>pages（超过总数时），会查询最后一页。
  reasonable: true
  params: count=countSql
  # 默认值为 false。设置为 true 时，允许在运行时根据多数据源自动识别对应方言的分页
  # 如果你在 Spring 中配置了动态数据源，并且连接不同类型的数据库，这时你可以配置 autoRuntimeDialect 为 true，
  # 这样在使用不同数据源时，会使用匹配的分页进行查询。这种情况下，你还需要特别注意 closeConn 参数，由于获取数据源
  # 类型会获取一个数据库连接，所以需要通过这个参数来控制获取连接后，是否关闭该连接。 默认为 true，有些数据库连接关
  # 闭后就没法进行后续的数据库操作。而有些数据库连接不关闭就会很快由于连接数用完而导致数据库无响应。所以在使用该功能
  # 时，特别需要注意你使用的数据源是否需要关闭数据库连接。
  #auto-runtime-dialect: false

